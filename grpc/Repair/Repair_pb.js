// source: Repair/Repair.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Schema_VehicleSchema_pb = require('../Schema/VehicleSchema_pb.js');
goog.object.extend(proto, Schema_VehicleSchema_pb);
goog.exportSymbol('proto.Repair.DeleteAllRepairsByVehicleIdRequest', null, global);
goog.exportSymbol('proto.Repair.DeleteAllRepairsByVehicleIdResponse', null, global);
goog.exportSymbol('proto.Repair.DeleteRepairRequest', null, global);
goog.exportSymbol('proto.Repair.DeleteRepairResponse', null, global);
goog.exportSymbol('proto.Repair.GetAllRepairsRequest', null, global);
goog.exportSymbol('proto.Repair.GetAllRepairsResponse', null, global);
goog.exportSymbol('proto.Repair.GetRepairRequest', null, global);
goog.exportSymbol('proto.Repair.GetRepairResponse', null, global);
goog.exportSymbol('proto.Repair.RepairCostsSchema', null, global);
goog.exportSymbol('proto.Repair.RepairPartSchema', null, global);
goog.exportSymbol('proto.Repair.RepairSchema', null, global);
goog.exportSymbol('proto.Repair.SetRepairRequest', null, global);
goog.exportSymbol('proto.Repair.SetRepairResponse', null, global);
goog.exportSymbol('proto.Repair.UpdateRepairRequest', null, global);
goog.exportSymbol('proto.Repair.UpdateRepairResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.RepairCostsSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.RepairCostsSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.RepairCostsSchema.displayName = 'proto.Repair.RepairCostsSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.RepairPartSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.RepairPartSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.RepairPartSchema.displayName = 'proto.Repair.RepairPartSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.RepairSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Repair.RepairSchema.repeatedFields_, null);
};
goog.inherits(proto.Repair.RepairSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.RepairSchema.displayName = 'proto.Repair.RepairSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.GetRepairRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.GetRepairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.GetRepairRequest.displayName = 'proto.Repair.GetRepairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.GetRepairResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.GetRepairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.GetRepairResponse.displayName = 'proto.Repair.GetRepairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.SetRepairRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.SetRepairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.SetRepairRequest.displayName = 'proto.Repair.SetRepairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.SetRepairResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.SetRepairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.SetRepairResponse.displayName = 'proto.Repair.SetRepairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.UpdateRepairRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.UpdateRepairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.UpdateRepairRequest.displayName = 'proto.Repair.UpdateRepairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.UpdateRepairResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.UpdateRepairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.UpdateRepairResponse.displayName = 'proto.Repair.UpdateRepairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.DeleteRepairRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.DeleteRepairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.DeleteRepairRequest.displayName = 'proto.Repair.DeleteRepairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.DeleteRepairResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.DeleteRepairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.DeleteRepairResponse.displayName = 'proto.Repair.DeleteRepairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.DeleteAllRepairsByVehicleIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.DeleteAllRepairsByVehicleIdRequest.displayName = 'proto.Repair.DeleteAllRepairsByVehicleIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.DeleteAllRepairsByVehicleIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.DeleteAllRepairsByVehicleIdResponse.displayName = 'proto.Repair.DeleteAllRepairsByVehicleIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.GetAllRepairsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repair.GetAllRepairsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.GetAllRepairsRequest.displayName = 'proto.Repair.GetAllRepairsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repair.GetAllRepairsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Repair.GetAllRepairsResponse.repeatedFields_, null);
};
goog.inherits(proto.Repair.GetAllRepairsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repair.GetAllRepairsResponse.displayName = 'proto.Repair.GetAllRepairsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.RepairCostsSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.RepairCostsSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.RepairCostsSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairCostsSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    countAll: jspb.Message.getFieldWithDefault(msg, 1, 0),
    priceNettoAll: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    priceBruttoAll: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    taxAll: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.RepairCostsSchema}
 */
proto.Repair.RepairCostsSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.RepairCostsSchema;
  return proto.Repair.RepairCostsSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.RepairCostsSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.RepairCostsSchema}
 */
proto.Repair.RepairCostsSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountAll(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceNettoAll(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceBruttoAll(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTaxAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.RepairCostsSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.RepairCostsSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.RepairCostsSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairCostsSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountAll();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPriceNettoAll();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPriceBruttoAll();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTaxAll();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 count_all = 1;
 * @return {number}
 */
proto.Repair.RepairCostsSchema.prototype.getCountAll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairCostsSchema} returns this
 */
proto.Repair.RepairCostsSchema.prototype.setCountAll = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double price_netto_all = 2;
 * @return {number}
 */
proto.Repair.RepairCostsSchema.prototype.getPriceNettoAll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairCostsSchema} returns this
 */
proto.Repair.RepairCostsSchema.prototype.setPriceNettoAll = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double price_brutto_all = 3;
 * @return {number}
 */
proto.Repair.RepairCostsSchema.prototype.getPriceBruttoAll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairCostsSchema} returns this
 */
proto.Repair.RepairCostsSchema.prototype.setPriceBruttoAll = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double tax_all = 4;
 * @return {number}
 */
proto.Repair.RepairCostsSchema.prototype.getTaxAll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairCostsSchema} returns this
 */
proto.Repair.RepairCostsSchema.prototype.setTaxAll = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.RepairPartSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.RepairPartSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.RepairPartSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairPartSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priceBuyNetto: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    priceNetto: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    priceBrutto: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    tax: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    count: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.RepairPartSchema}
 */
proto.Repair.RepairPartSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.RepairPartSchema;
  return proto.Repair.RepairPartSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.RepairPartSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.RepairPartSchema}
 */
proto.Repair.RepairPartSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceBuyNetto(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceNetto(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceBrutto(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTax(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.RepairPartSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.RepairPartSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.RepairPartSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairPartSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriceBuyNetto();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPriceNetto();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPriceBrutto();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTax();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Repair.RepairPartSchema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double price_buy_netto = 2;
 * @return {number}
 */
proto.Repair.RepairPartSchema.prototype.getPriceBuyNetto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setPriceBuyNetto = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double price_netto = 3;
 * @return {number}
 */
proto.Repair.RepairPartSchema.prototype.getPriceNetto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setPriceNetto = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double price_brutto = 4;
 * @return {number}
 */
proto.Repair.RepairPartSchema.prototype.getPriceBrutto = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setPriceBrutto = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double tax = 5;
 * @return {number}
 */
proto.Repair.RepairPartSchema.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setTax = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 count = 6;
 * @return {number}
 */
proto.Repair.RepairPartSchema.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairPartSchema} returns this
 */
proto.Repair.RepairPartSchema.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Repair.RepairSchema.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.RepairSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.RepairSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.RepairSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mileage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    vehicleId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    vehicle: (f = msg.getVehicle()) && Schema_VehicleSchema_pb.VehicleSchema.toObject(includeInstance, f),
    partsList: jspb.Message.toObjectList(msg.getPartsList(),
    proto.Repair.RepairPartSchema.toObject, includeInstance),
    costs: (f = msg.getCosts()) && proto.Repair.RepairCostsSchema.toObject(includeInstance, f),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.RepairSchema}
 */
proto.Repair.RepairSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.RepairSchema;
  return proto.Repair.RepairSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.RepairSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.RepairSchema}
 */
proto.Repair.RepairSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMileage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleId(value);
      break;
    case 6:
      var value = new Schema_VehicleSchema_pb.VehicleSchema;
      reader.readMessage(value,Schema_VehicleSchema_pb.VehicleSchema.deserializeBinaryFromReader);
      msg.setVehicle(value);
      break;
    case 7:
      var value = new proto.Repair.RepairPartSchema;
      reader.readMessage(value,proto.Repair.RepairPartSchema.deserializeBinaryFromReader);
      msg.addParts(value);
      break;
    case 8:
      var value = new proto.Repair.RepairCostsSchema;
      reader.readMessage(value,proto.Repair.RepairCostsSchema.deserializeBinaryFromReader);
      msg.setCosts(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.RepairSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.RepairSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.RepairSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.RepairSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMileage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVehicleId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVehicle();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      Schema_VehicleSchema_pb.VehicleSchema.serializeBinaryToWriter
    );
  }
  f = message.getPartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Repair.RepairPartSchema.serializeBinaryToWriter
    );
  }
  f = message.getCosts();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Repair.RepairCostsSchema.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Repair.RepairSchema.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.Repair.RepairSchema.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.Repair.RepairSchema.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 mileage = 4;
 * @return {number}
 */
proto.Repair.RepairSchema.prototype.getMileage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setMileage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string vehicle_id = 5;
 * @return {string}
 */
proto.Repair.RepairSchema.prototype.getVehicleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setVehicleId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Schema.VehicleSchema vehicle = 6;
 * @return {?proto.Schema.VehicleSchema}
 */
proto.Repair.RepairSchema.prototype.getVehicle = function() {
  return /** @type{?proto.Schema.VehicleSchema} */ (
    jspb.Message.getWrapperField(this, Schema_VehicleSchema_pb.VehicleSchema, 6));
};


/**
 * @param {?proto.Schema.VehicleSchema|undefined} value
 * @return {!proto.Repair.RepairSchema} returns this
*/
proto.Repair.RepairSchema.prototype.setVehicle = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.clearVehicle = function() {
  return this.setVehicle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.RepairSchema.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated RepairPartSchema parts = 7;
 * @return {!Array<!proto.Repair.RepairPartSchema>}
 */
proto.Repair.RepairSchema.prototype.getPartsList = function() {
  return /** @type{!Array<!proto.Repair.RepairPartSchema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Repair.RepairPartSchema, 7));
};


/**
 * @param {!Array<!proto.Repair.RepairPartSchema>} value
 * @return {!proto.Repair.RepairSchema} returns this
*/
proto.Repair.RepairSchema.prototype.setPartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Repair.RepairPartSchema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Repair.RepairPartSchema}
 */
proto.Repair.RepairSchema.prototype.addParts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Repair.RepairPartSchema, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.clearPartsList = function() {
  return this.setPartsList([]);
};


/**
 * optional RepairCostsSchema costs = 8;
 * @return {?proto.Repair.RepairCostsSchema}
 */
proto.Repair.RepairSchema.prototype.getCosts = function() {
  return /** @type{?proto.Repair.RepairCostsSchema} */ (
    jspb.Message.getWrapperField(this, proto.Repair.RepairCostsSchema, 8));
};


/**
 * @param {?proto.Repair.RepairCostsSchema|undefined} value
 * @return {!proto.Repair.RepairSchema} returns this
*/
proto.Repair.RepairSchema.prototype.setCosts = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.clearCosts = function() {
  return this.setCosts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.RepairSchema.prototype.hasCosts = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 created_at = 9;
 * @return {number}
 */
proto.Repair.RepairSchema.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 updated_at = 10;
 * @return {number}
 */
proto.Repair.RepairSchema.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.RepairSchema} returns this
 */
proto.Repair.RepairSchema.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.GetRepairRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.GetRepairRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.GetRepairRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetRepairRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.GetRepairRequest}
 */
proto.Repair.GetRepairRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.GetRepairRequest;
  return proto.Repair.GetRepairRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.GetRepairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.GetRepairRequest}
 */
proto.Repair.GetRepairRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.GetRepairRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.GetRepairRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.GetRepairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetRepairRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Repair.GetRepairRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.GetRepairRequest} returns this
 */
proto.Repair.GetRepairRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.GetRepairResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.GetRepairResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.GetRepairResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetRepairResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    repair: (f = msg.getRepair()) && proto.Repair.RepairSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.GetRepairResponse}
 */
proto.Repair.GetRepairResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.GetRepairResponse;
  return proto.Repair.GetRepairResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.GetRepairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.GetRepairResponse}
 */
proto.Repair.GetRepairResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Repair.RepairSchema;
      reader.readMessage(value,proto.Repair.RepairSchema.deserializeBinaryFromReader);
      msg.setRepair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.GetRepairResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.GetRepairResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.GetRepairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetRepairResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepair();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Repair.RepairSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional RepairSchema repair = 1;
 * @return {?proto.Repair.RepairSchema}
 */
proto.Repair.GetRepairResponse.prototype.getRepair = function() {
  return /** @type{?proto.Repair.RepairSchema} */ (
    jspb.Message.getWrapperField(this, proto.Repair.RepairSchema, 1));
};


/**
 * @param {?proto.Repair.RepairSchema|undefined} value
 * @return {!proto.Repair.GetRepairResponse} returns this
*/
proto.Repair.GetRepairResponse.prototype.setRepair = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repair.GetRepairResponse} returns this
 */
proto.Repair.GetRepairResponse.prototype.clearRepair = function() {
  return this.setRepair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.GetRepairResponse.prototype.hasRepair = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.SetRepairRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.SetRepairRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.SetRepairRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.SetRepairRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    repair: (f = msg.getRepair()) && proto.Repair.RepairSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.SetRepairRequest}
 */
proto.Repair.SetRepairRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.SetRepairRequest;
  return proto.Repair.SetRepairRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.SetRepairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.SetRepairRequest}
 */
proto.Repair.SetRepairRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Repair.RepairSchema;
      reader.readMessage(value,proto.Repair.RepairSchema.deserializeBinaryFromReader);
      msg.setRepair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.SetRepairRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.SetRepairRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.SetRepairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.SetRepairRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepair();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Repair.RepairSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional RepairSchema repair = 1;
 * @return {?proto.Repair.RepairSchema}
 */
proto.Repair.SetRepairRequest.prototype.getRepair = function() {
  return /** @type{?proto.Repair.RepairSchema} */ (
    jspb.Message.getWrapperField(this, proto.Repair.RepairSchema, 1));
};


/**
 * @param {?proto.Repair.RepairSchema|undefined} value
 * @return {!proto.Repair.SetRepairRequest} returns this
*/
proto.Repair.SetRepairRequest.prototype.setRepair = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repair.SetRepairRequest} returns this
 */
proto.Repair.SetRepairRequest.prototype.clearRepair = function() {
  return this.setRepair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.SetRepairRequest.prototype.hasRepair = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.SetRepairResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.SetRepairResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.SetRepairResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.SetRepairResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.SetRepairResponse}
 */
proto.Repair.SetRepairResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.SetRepairResponse;
  return proto.Repair.SetRepairResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.SetRepairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.SetRepairResponse}
 */
proto.Repair.SetRepairResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.SetRepairResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.SetRepairResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.SetRepairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.SetRepairResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Repair.SetRepairResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.SetRepairResponse} returns this
 */
proto.Repair.SetRepairResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.UpdateRepairRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.UpdateRepairRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.UpdateRepairRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.UpdateRepairRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    repair: (f = msg.getRepair()) && proto.Repair.RepairSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.UpdateRepairRequest}
 */
proto.Repair.UpdateRepairRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.UpdateRepairRequest;
  return proto.Repair.UpdateRepairRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.UpdateRepairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.UpdateRepairRequest}
 */
proto.Repair.UpdateRepairRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Repair.RepairSchema;
      reader.readMessage(value,proto.Repair.RepairSchema.deserializeBinaryFromReader);
      msg.setRepair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.UpdateRepairRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.UpdateRepairRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.UpdateRepairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.UpdateRepairRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepair();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Repair.RepairSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional RepairSchema repair = 1;
 * @return {?proto.Repair.RepairSchema}
 */
proto.Repair.UpdateRepairRequest.prototype.getRepair = function() {
  return /** @type{?proto.Repair.RepairSchema} */ (
    jspb.Message.getWrapperField(this, proto.Repair.RepairSchema, 1));
};


/**
 * @param {?proto.Repair.RepairSchema|undefined} value
 * @return {!proto.Repair.UpdateRepairRequest} returns this
*/
proto.Repair.UpdateRepairRequest.prototype.setRepair = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repair.UpdateRepairRequest} returns this
 */
proto.Repair.UpdateRepairRequest.prototype.clearRepair = function() {
  return this.setRepair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.UpdateRepairRequest.prototype.hasRepair = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.UpdateRepairResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.UpdateRepairResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.UpdateRepairResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.UpdateRepairResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.UpdateRepairResponse}
 */
proto.Repair.UpdateRepairResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.UpdateRepairResponse;
  return proto.Repair.UpdateRepairResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.UpdateRepairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.UpdateRepairResponse}
 */
proto.Repair.UpdateRepairResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.UpdateRepairResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.UpdateRepairResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.UpdateRepairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.UpdateRepairResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool updated = 1;
 * @return {boolean}
 */
proto.Repair.UpdateRepairResponse.prototype.getUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Repair.UpdateRepairResponse} returns this
 */
proto.Repair.UpdateRepairResponse.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.DeleteRepairRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.DeleteRepairRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.DeleteRepairRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteRepairRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.DeleteRepairRequest}
 */
proto.Repair.DeleteRepairRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.DeleteRepairRequest;
  return proto.Repair.DeleteRepairRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.DeleteRepairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.DeleteRepairRequest}
 */
proto.Repair.DeleteRepairRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.DeleteRepairRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.DeleteRepairRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.DeleteRepairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteRepairRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Repair.DeleteRepairRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.DeleteRepairRequest} returns this
 */
proto.Repair.DeleteRepairRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.DeleteRepairResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.DeleteRepairResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.DeleteRepairResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteRepairResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.DeleteRepairResponse}
 */
proto.Repair.DeleteRepairResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.DeleteRepairResponse;
  return proto.Repair.DeleteRepairResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.DeleteRepairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.DeleteRepairResponse}
 */
proto.Repair.DeleteRepairResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.DeleteRepairResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.DeleteRepairResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.DeleteRepairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteRepairResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * @return {boolean}
 */
proto.Repair.DeleteRepairResponse.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Repair.DeleteRepairResponse} returns this
 */
proto.Repair.DeleteRepairResponse.prototype.setDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.DeleteAllRepairsByVehicleIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicleId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdRequest}
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.DeleteAllRepairsByVehicleIdRequest;
  return proto.Repair.DeleteAllRepairsByVehicleIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdRequest}
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.DeleteAllRepairsByVehicleIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehicleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vehicle_id = 1;
 * @return {string}
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.prototype.getVehicleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdRequest} returns this
 */
proto.Repair.DeleteAllRepairsByVehicleIdRequest.prototype.setVehicleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.DeleteAllRepairsByVehicleIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdResponse}
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.DeleteAllRepairsByVehicleIdResponse;
  return proto.Repair.DeleteAllRepairsByVehicleIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdResponse}
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.DeleteAllRepairsByVehicleIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.DeleteAllRepairsByVehicleIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * @return {boolean}
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Repair.DeleteAllRepairsByVehicleIdResponse} returns this
 */
proto.Repair.DeleteAllRepairsByVehicleIdResponse.prototype.setDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.GetAllRepairsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.GetAllRepairsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.GetAllRepairsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetAllRepairsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    perPage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderby: jspb.Message.getFieldWithDefault(msg, 4, ""),
    where: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.GetAllRepairsRequest}
 */
proto.Repair.GetAllRepairsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.GetAllRepairsRequest;
  return proto.Repair.GetAllRepairsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.GetAllRepairsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.GetAllRepairsRequest}
 */
proto.Repair.GetAllRepairsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPerPage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderby(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhere(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.GetAllRepairsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.GetAllRepairsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.GetAllRepairsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetAllRepairsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPerPage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderby();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.Repair.GetAllRepairsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 per_page = 2;
 * @return {number}
 */
proto.Repair.GetAllRepairsRequest.prototype.getPerPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.setPerPage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string sort = 3;
 * @return {string}
 */
proto.Repair.GetAllRepairsRequest.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.setSort = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orderby = 4;
 * @return {string}
 */
proto.Repair.GetAllRepairsRequest.prototype.getOrderby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.setOrderby = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string where = 5;
 * @return {string}
 */
proto.Repair.GetAllRepairsRequest.prototype.getWhere = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.setWhere = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Repair.GetAllRepairsRequest} returns this
 */
proto.Repair.GetAllRepairsRequest.prototype.clearWhere = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repair.GetAllRepairsRequest.prototype.hasWhere = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Repair.GetAllRepairsResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repair.GetAllRepairsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Repair.GetAllRepairsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repair.GetAllRepairsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetAllRepairsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    perPage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isNextPage: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    repairsList: jspb.Message.toObjectList(msg.getRepairsList(),
    proto.Repair.RepairSchema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repair.GetAllRepairsResponse}
 */
proto.Repair.GetAllRepairsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repair.GetAllRepairsResponse;
  return proto.Repair.GetAllRepairsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repair.GetAllRepairsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repair.GetAllRepairsResponse}
 */
proto.Repair.GetAllRepairsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPerPage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNextPage(value);
      break;
    case 6:
      var value = new proto.Repair.RepairSchema;
      reader.readMessage(value,proto.Repair.RepairSchema.deserializeBinaryFromReader);
      msg.addRepairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repair.GetAllRepairsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repair.GetAllRepairsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repair.GetAllRepairsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repair.GetAllRepairsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPerPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsNextPage();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRepairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Repair.RepairSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.Repair.GetAllRepairsResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 page = 2;
 * @return {number}
 */
proto.Repair.GetAllRepairsResponse.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 per_page = 3;
 * @return {number}
 */
proto.Repair.GetAllRepairsResponse.prototype.getPerPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.setPerPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sort = 4;
 * @return {string}
 */
proto.Repair.GetAllRepairsResponse.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.setSort = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_next_page = 5;
 * @return {boolean}
 */
proto.Repair.GetAllRepairsResponse.prototype.getIsNextPage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.setIsNextPage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated RepairSchema repairs = 6;
 * @return {!Array<!proto.Repair.RepairSchema>}
 */
proto.Repair.GetAllRepairsResponse.prototype.getRepairsList = function() {
  return /** @type{!Array<!proto.Repair.RepairSchema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Repair.RepairSchema, 6));
};


/**
 * @param {!Array<!proto.Repair.RepairSchema>} value
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
*/
proto.Repair.GetAllRepairsResponse.prototype.setRepairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Repair.RepairSchema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Repair.RepairSchema}
 */
proto.Repair.GetAllRepairsResponse.prototype.addRepairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Repair.RepairSchema, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Repair.GetAllRepairsResponse} returns this
 */
proto.Repair.GetAllRepairsResponse.prototype.clearRepairsList = function() {
  return this.setRepairsList([]);
};


goog.object.extend(exports, proto.Repair);
